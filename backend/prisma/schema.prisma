// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String   
  orders   Order[]
}


model Table {
  id         Int      @id @default(autoincrement())
  number     Int      @unique
  capacity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bookings   Booking[]
}

model Booking {
  id         Int   @id @default(autoincrement())
  tableId    Int
  table      Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  name       String
  phone      String
  email      String?  
  date       DateTime
  notes      String?  
  createdAt  DateTime @default(now())
}

model Product {
  id             Int   @id @default(autoincrement())
  name           String
  price          String?
  bgColor          String?
  imageUrl       String?
  category       String
  discountActive Boolean  @default(false)
  discountValue  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  items       Json
  totalAmount Decimal
  status      String   @default("pending") // ["pending", "paid", "shipped", "completed", "cancelled"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  deliveries  Delivery[] @relation("OrderToDelivery")
}


model Delivery {
  id             Int      @id @default(autoincrement())
  orderId        Int?  
  order          Order?   @relation("OrderToDelivery", fields: [orderId], references: [id])
  address        String
  status         String   @default("pending")
  trackingNumber String?
  customerId  Int
  customer    Customer @relation(fields: [customerId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Customer {
  id      Int       @id @default(autoincrement())
  name    String
  email   String    @unique
  mobile  String
  deliveries Delivery[]
}